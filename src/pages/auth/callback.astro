---
import Layout from "../../layouts/Layout.astro";
import { getFullPath } from "../../lib/utils/path";
---

<Layout>
  <main class="min-h-screen flex items-center justify-center bg-gray-50">
    <div class="max-w-md w-full bg-white rounded-lg shadow-md p-8 text-center">
      <div class="mb-6">
        <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        </div>
        <h1 class="text-2xl font-bold text-gray-900 mb-2">登入成功！</h1>
        <p class="text-gray-600">您已成功登入我們的食譜本</p>
      </div>

      <div class="space-y-4">
        <button 
          id="continue-btn"
          class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
        >
          繼續使用
        </button>
        
        <p class="text-sm text-gray-500">
          如果頁面沒有自動跳轉，請點擊上方按鈕
        </p>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const continueBtn = document.getElementById('continue-btn');
    const statusText = document.querySelector('p.text-gray-600');
    
    try {
      // 動態載入認證管理器
      const { authManager, supabase } = await import('../../lib/auth/AuthManager.ts');
      
      // 處理認證回調
      const urlParams = new URLSearchParams(window.location.search);
      const accessToken = urlParams.get('access_token');
      const refreshToken = urlParams.get('refresh_token');
      const type = urlParams.get('type');

      if (accessToken && refreshToken) {
        // 使用 Supabase 正確設定 session
        const { error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken
        });

        if (error) {
          throw new Error(`認證失敗: ${error.message}`);
        }

        // 等待認證狀態更新
        await new Promise((resolve) => {
          const unsubscribe = supabase.auth.onAuthStateChange((event, session) => {
            if (event === 'SIGNED_IN' && session) {
              unsubscribe.data.subscription.unsubscribe();
              resolve(session);
            }
          });
        });

        // 清除 URL 參數
        const newUrl = window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
        
        // 更新狀態文字
        if (statusText) {
          statusText.textContent = '認證成功！正在載入您的資料...';
        }
        
        // 等待一下讓使用者看到成功訊息
        await new Promise(resolve => setTimeout(resolve, 1000));
      } else {
        throw new Error('缺少認證參數');
      }

      // 繼續按鈕點擊事件
      continueBtn?.addEventListener('click', async () => {
        const returnUrl = sessionStorage.getItem('returnUrl') || '/LoveReceipe/';
        const { getClientNavigationUrl } = await import('../../lib/utils/client-path');
        window.location.href = getClientNavigationUrl('/');
      });

      // 自動跳轉（2秒後）
      setTimeout(async () => {
        const { getClientNavigationUrl } = await import('../../lib/utils/client-path');
        window.location.href = getClientNavigationUrl('/');
      }, 2000);

    } catch (error) {
      console.error('認證回調處理失敗:', error);
      
      // 更新狀態文字為錯誤
      if (statusText) {
        statusText.textContent = `認證失敗: ${error.message}`;
        statusText.className = 'text-red-600';
      }
      
      // 更新按鈕文字
      if (continueBtn) {
        continueBtn.textContent = '返回首頁';
        continueBtn.onclick = async () => {
          const { getClientNavigationUrl } = await import('../../lib/utils/client-path');
          window.location.href = getClientNavigationUrl('/');
        };
      }
    }
  });
</script>
