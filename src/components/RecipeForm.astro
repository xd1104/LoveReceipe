---
import ImageUpload from "./ImageUpload.astro";

export interface Props {
  recipe?: {
    id?: string;
    title: string;
    description?: string;
    cover_url?: string;
    difficulty: 'easy' | 'normal' | 'hard';
    minutes?: number;
    servings?: number;
    status: 'to_try' | 'done' | 'favorite';
    tags?: string[];
    ingredients?: Array<{
      name: string;
      amount?: string;
      unit?: string;
      note?: string;
    }>;
    steps?: Array<{
      content: string;
      image_url?: string;
    }>;
  };
  onSubmit?: (data: any) => void;
  onCancel?: () => void;
  isEditing?: boolean;
}

const {
  recipe = {
    title: '',
    description: '',
    difficulty: 'normal' as const,
    status: 'to_try' as const,
    ingredients: [],
    steps: []
  },
  onSubmit,
  onCancel,
  isEditing = false
} = Astro.props;

const difficultyOptions = [
  { value: 'easy', label: '簡單' },
  { value: 'normal', label: '普通' },
  { value: 'hard', label: '困難' }
];

const statusOptions = [
  { value: 'to_try', label: '想做' },
  { value: 'done', label: '做過' },
  { value: 'favorite', label: '最愛' }
];
---

<form id="recipe-form" class="space-y-6">
  <!-- 基本資訊 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">基本資訊</h3>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- 標題 -->
      <div class="md:col-span-2">
        <label for="title" class="block text-sm font-medium text-gray-700 mb-1">
          食譜標題 *
        </label>
        <input
          type="text"
          id="title"
          name="title"
          value={recipe.title}
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="請輸入食譜標題"
        />
      </div>
      
      <!-- 描述 -->
      <div class="md:col-span-2">
        <label for="description" class="block text-sm font-medium text-gray-700 mb-1">
          描述
        </label>
        <textarea
          id="description"
          name="description"
          rows="3"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="簡單描述這道菜..."
        >{recipe.description}</textarea>
      </div>
      
      <!-- 難度 -->
      <div>
        <label for="difficulty" class="block text-sm font-medium text-gray-700 mb-1">
          難度 *
        </label>
        <select
          id="difficulty"
          name="difficulty"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          {difficultyOptions.map(option => (
            <option value={option.value} selected={recipe.difficulty === option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
      
      <!-- 狀態 -->
      <div>
        <label for="status" class="block text-sm font-medium text-gray-700 mb-1">
          狀態 *
        </label>
        <select
          id="status"
          name="status"
          required
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          {statusOptions.map(option => (
            <option value={option.value} selected={recipe.status === option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
      
      <!-- 時間 -->
      <div>
        <label for="minutes" class="block text-sm font-medium text-gray-700 mb-1">
          烹飪時間（分鐘）
        </label>
        <input
          type="number"
          id="minutes"
          name="minutes"
          value={recipe.minutes || ''}
          min="1"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="30"
        />
      </div>
      
      <!-- 份量 -->
      <div>
        <label for="servings" class="block text-sm font-medium text-gray-700 mb-1">
          份量（人份）
        </label>
        <input
          type="number"
          id="servings"
          name="servings"
          value={recipe.servings || ''}
          min="1"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="2"
        />
      </div>
    </div>
  </div>
  
  <!-- 封面圖片 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">封面圖片</h3>
    <ImageUpload 
      accept="image/*"
      multiple={false}
      maxSize={5}
      className="max-w-md"
    />
  </div>
  
  <!-- 標籤 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <h3 class="text-lg font-semibold text-gray-900 mb-4">標籤</h3>
    <div class="space-y-3">
      <div id="tag-input-container" class="flex flex-wrap gap-2">
        <!-- 現有標籤 -->
        {recipe.tags?.map(tag => (
          <span class="tag-item px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm flex items-center gap-2">
            {tag}
            <button type="button" class="tag-remove text-blue-600 hover:text-blue-800" data-tag={tag}>
              ×
            </button>
          </span>
        ))}
      </div>
      <div class="flex gap-2">
        <input
          type="text"
          id="tag-input"
          placeholder="輸入標籤後按 Enter"
          class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        <button
          type="button"
          id="add-tag"
          class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
        >
          新增
        </button>
      </div>
    </div>
  </div>
  
  <!-- 食材 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900">食材</h3>
      <button
        type="button"
        id="add-ingredient"
        class="px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors"
      >
        + 新增食材
      </button>
    </div>
    <div id="ingredients-list" class="space-y-3">
      {recipe.ingredients?.map((ingredient, index) => (
        <div class="ingredient-item grid grid-cols-1 md:grid-cols-4 gap-2 items-end">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">食材名稱 *</label>
            <input
              type="text"
              name="ingredients[][name]"
              value={ingredient.name}
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="例如：雞胸肉"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">數量</label>
            <input
              type="text"
              name="ingredients[][amount]"
              value={ingredient.amount || ''}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="200"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">單位</label>
            <input
              type="text"
              name="ingredients[][unit]"
              value={ingredient.unit || ''}
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="g"
            />
          </div>
          <div class="flex gap-2">
            <input
              type="text"
              name="ingredients[][note]"
              value={ingredient.note || ''}
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="備註"
            />
            <button
              type="button"
              class="remove-ingredient px-2 py-2 text-red-600 hover:text-red-800"
              title="刪除"
            >
              ×
            </button>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <!-- 步驟 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-900">烹飪步驟</h3>
      <button
        type="button"
        id="add-step"
        class="px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors"
      >
        + 新增步驟
      </button>
    </div>
    <div id="steps-list" class="space-y-4">
      {recipe.steps?.map((step, index) => (
        <div class="step-item border border-gray-200 rounded-lg p-4">
          <div class="flex items-start gap-3">
            <span class="step-number flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
              {index + 1}
            </span>
            <div class="flex-1 space-y-3">
              <textarea
                name="steps[][content]"
                rows="3"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="描述這個步驟..."
              >{step.content}</textarea>
              <div class="flex items-center gap-2">
                <ImageUpload 
                  accept="image/*"
                  multiple={false}
                  maxSize={5}
                  className="flex-1"
                />
                <button
                  type="button"
                  class="remove-step px-3 py-2 text-red-600 hover:text-red-800 border border-red-300 rounded-md hover:bg-red-50"
                >
                  刪除步驟
                </button>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
  
  <!-- 操作按鈕 -->
  <div class="flex justify-end gap-3">
    <button
      type="button"
      id="cancel-btn"
      class="px-6 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
    >
      取消
    </button>
    <button
      type="submit"
      class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
    >
      {isEditing ? '更新食譜' : '建立食譜'}
    </button>
  </div>
</form>

<script>
  class RecipeForm {
    private form: HTMLFormElement;
    private tagInput: HTMLInputElement;
    private addTagBtn: HTMLButtonElement;
    private addIngredientBtn: HTMLButtonElement;
    private addStepBtn: HTMLButtonElement;
    private cancelBtn: HTMLButtonElement;
    private ingredientsList: HTMLElement;
    private stepsList: HTMLElement;
    private tags: string[] = [];
    
    constructor() {
      this.form = document.getElementById('recipe-form') as HTMLFormElement;
      this.tagInput = document.getElementById('tag-input') as HTMLInputElement;
      this.addTagBtn = document.getElementById('add-tag') as HTMLButtonElement;
      this.addIngredientBtn = document.getElementById('add-ingredient') as HTMLButtonElement;
      this.addStepBtn = document.getElementById('add-step') as HTMLButtonElement;
      this.cancelBtn = document.getElementById('cancel-btn') as HTMLButtonElement;
      this.ingredientsList = document.getElementById('ingredients-list') as HTMLElement;
      this.stepsList = document.getElementById('steps-list') as HTMLElement;
      
      this.init();
    }
    
    private init() {
      // 標籤功能
      this.tagInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          this.addTag();
        }
      });
      
      this.addTagBtn.addEventListener('click', () => {
        this.addTag();
      });
      
      // 食材功能
      this.addIngredientBtn.addEventListener('click', () => {
        this.addIngredient();
      });
      
      // 步驟功能
      this.addStepBtn.addEventListener('click', () => {
        this.addStep();
      });
      
      // 表單提交
      this.form.addEventListener('submit', (e) => {
        e.preventDefault();
        this.handleSubmit();
      });
      
      // 取消按鈕
      this.cancelBtn.addEventListener('click', () => {
        window.dispatchEvent(new CustomEvent('formCancel'));
      });
      
      // 初始化現有標籤
      this.initExistingTags();
    }
    
    private initExistingTags() {
      const existingTags = document.querySelectorAll('.tag-item');
      existingTags.forEach(tag => {
        const tagText = tag.textContent?.trim().replace('×', '') || '';
        if (tagText) {
          this.tags.push(tagText);
        }
      });
    }
    
    private addTag() {
      const tagText = this.tagInput.value.trim();
      if (tagText && !this.tags.includes(tagText)) {
        this.tags.push(tagText);
        this.renderTags();
        this.tagInput.value = '';
      }
    }
    
    private renderTags() {
      const container = document.getElementById('tag-input-container');
      if (!container) return;
      
      container.innerHTML = this.tags.map(tag => `
        <span class="tag-item px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm flex items-center gap-2">
          ${tag}
          <button type="button" class="tag-remove text-blue-600 hover:text-blue-800" data-tag="${tag}">
            ×
          </button>
        </span>
      `).join('');
      
      // 綁定刪除事件
      container.querySelectorAll('.tag-remove').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const tag = (e.target as HTMLElement).getAttribute('data-tag');
          if (tag) {
            this.tags = this.tags.filter(t => t !== tag);
            this.renderTags();
          }
        });
      });
    }
    
    private addIngredient() {
      const ingredientHtml = `
        <div class="ingredient-item grid grid-cols-1 md:grid-cols-4 gap-2 items-end">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">食材名稱 *</label>
            <input
              type="text"
              name="ingredients[][name]"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="例如：雞胸肉"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">數量</label>
            <input
              type="text"
              name="ingredients[][amount]"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="200"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">單位</label>
            <input
              type="text"
              name="ingredients[][unit]"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="g"
            />
          </div>
          <div class="flex gap-2">
            <input
              type="text"
              name="ingredients[][note]"
              class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="備註"
            />
            <button
              type="button"
              class="remove-ingredient px-2 py-2 text-red-600 hover:text-red-800"
              title="刪除"
            >
              ×
            </button>
          </div>
        </div>
      `;
      
      this.ingredientsList.insertAdjacentHTML('beforeend', ingredientHtml);
      
      // 綁定刪除事件
      const newIngredient = this.ingredientsList.lastElementChild;
      const removeBtn = newIngredient?.querySelector('.remove-ingredient');
      removeBtn?.addEventListener('click', () => {
        newIngredient?.remove();
      });
    }
    
    private addStep() {
      const stepNumber = this.stepsList.children.length + 1;
      const stepHtml = `
        <div class="step-item border border-gray-200 rounded-lg p-4">
          <div class="flex items-start gap-3">
            <span class="step-number flex-shrink-0 w-8 h-8 bg-blue-100 text-blue-800 rounded-full flex items-center justify-center text-sm font-medium">
              ${stepNumber}
            </span>
            <div class="flex-1 space-y-3">
              <textarea
                name="steps[][content]"
                rows="3"
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="描述這個步驟..."
              ></textarea>
              <div class="flex items-center gap-2">
                <div class="flex-1">
                  <input type="file" accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                </div>
                <button
                  type="button"
                  class="remove-step px-3 py-2 text-red-600 hover:text-red-800 border border-red-300 rounded-md hover:bg-red-50"
                >
                  刪除步驟
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      this.stepsList.insertAdjacentHTML('beforeend', stepHtml);
      
      // 綁定刪除事件
      const newStep = this.stepsList.lastElementChild;
      const removeBtn = newStep?.querySelector('.remove-step');
      removeBtn?.addEventListener('click', () => {
        newStep?.remove();
        this.updateStepNumbers();
      });
    }
    
    private updateStepNumbers() {
      const steps = this.stepsList.querySelectorAll('.step-item');
      steps.forEach((step, index) => {
        const numberSpan = step.querySelector('.step-number');
        if (numberSpan) {
          numberSpan.textContent = (index + 1).toString();
        }
      });
    }
    
    private handleSubmit() {
      const formData = new FormData(this.form);
      
      // 收集表單資料
      const data = {
        title: formData.get('title'),
        description: formData.get('description'),
        difficulty: formData.get('difficulty'),
        status: formData.get('status'),
        minutes: formData.get('minutes') ? parseInt(formData.get('minutes') as string) : null,
        servings: formData.get('servings') ? parseInt(formData.get('servings') as string) : null,
        tags: this.tags,
        ingredients: this.collectIngredients(),
        steps: this.collectSteps()
      };
      
      // 觸發提交事件
      window.dispatchEvent(new CustomEvent('formSubmit', { detail: data }));
    }
    
    private collectIngredients() {
      const ingredients: any[] = [];
      const ingredientItems = this.ingredientsList.querySelectorAll('.ingredient-item');
      
      ingredientItems.forEach(item => {
        const name = (item.querySelector('input[name*="[name]"]') as HTMLInputElement)?.value;
        const amount = (item.querySelector('input[name*="[amount]"]') as HTMLInputElement)?.value;
        const unit = (item.querySelector('input[name*="[unit]"]') as HTMLInputElement)?.value;
        const note = (item.querySelector('input[name*="[note]"]') as HTMLInputElement)?.value;
        
        if (name) {
          ingredients.push({ name, amount, unit, note });
        }
      });
      
      return ingredients;
    }
    
    private collectSteps() {
      const steps: any[] = [];
      const stepItems = this.stepsList.querySelectorAll('.step-item');
      
      stepItems.forEach(item => {
        const content = (item.querySelector('textarea[name*="[content]"]') as HTMLTextAreaElement)?.value;
        if (content) {
          steps.push({ content });
        }
      });
      
      return steps;
    }
  }
  
  // 初始化
  document.addEventListener('DOMContentLoaded', () => {
    new RecipeForm();
  });
</script>
