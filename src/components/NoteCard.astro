---
export interface Props {
  note: {
    id: string;
    content: string;
    rating: number;
    images: string[];
    created_at: string;
    recipe?: {
      id: string;
      title: string;
      cover_url?: string;
    };
    author?: {
      nickname?: string;
      avatar_url?: string;
    };
  };
  showRecipe?: boolean;
  showAuthor?: boolean;
  editable?: boolean;
}
const { note, showRecipe = true, showAuthor = true, editable = false } = Astro.props;

// 格式化日期
const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('zh-TW', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
};

// 生成星級顯示
const renderStars = (rating: number) => {
  return Array.from({ length: 5 }, (_, i) => i < rating ? '★' : '☆').join('');
};
---

<div class="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow">
  <!-- 心得標題區域 -->
  <div class="flex items-start justify-between mb-4">
    <div class="flex-1">
      {showRecipe && note.recipe && (
        <div class="mb-2">
          <a 
            href={`/recipes/${note.recipe.id}`}
            class="text-blue-600 hover:text-blue-800 font-medium text-sm"
          >
            {note.recipe.title}
          </a>
        </div>
      )}
      
      {showAuthor && note.author && (
        <div class="flex items-center mb-2">
          {note.author.avatar_url ? (
            <img 
              src={note.author.avatar_url} 
              alt={note.author.nickname || '使用者'}
              class="w-6 h-6 rounded-full mr-2"
            />
          ) : (
            <div class="w-6 h-6 bg-gray-300 rounded-full mr-2 flex items-center justify-center">
              <span class="text-xs text-gray-600">
                {(note.author.nickname || '使用者').charAt(0)}
              </span>
            </div>
          )}
          <span class="text-sm text-gray-600">
            {note.author.nickname || '使用者'}
          </span>
        </div>
      )}
    </div>
    
    <div class="flex items-center space-x-2">
      <div class="text-yellow-500 text-lg">
        {renderStars(note.rating)}
      </div>
      <span class="text-sm text-gray-500">
        {formatDate(note.created_at)}
      </span>
    </div>
  </div>

  <!-- 心得內容 -->
  <div class="mb-4">
    <p class="text-gray-800 leading-relaxed whitespace-pre-wrap">
      {note.content}
    </p>
  </div>

  <!-- 心得圖片 -->
  {note.images && note.images.length > 0 && (
    <div class="mb-4">
      <div class="grid grid-cols-2 md:grid-cols-3 gap-2">
        {note.images.map((imageUrl, index) => (
          <img 
            src={imageUrl} 
            alt={`心得圖片 ${index + 1}`}
            class="w-full h-32 object-cover rounded-lg cursor-pointer hover:opacity-80 transition-opacity"
            onclick={`openImageModal('${imageUrl}')`}
          />
        ))}
      </div>
    </div>
  )}

  <!-- 操作按鈕 -->
  {editable && (
    <div class="flex justify-end space-x-2 pt-4 border-t border-gray-200">
      <button 
        onclick={`editNote('${note.id}')`}
        class="px-3 py-1 text-sm text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded"
      >
        編輯
      </button>
      <button 
        onclick={`deleteNote('${note.id}')`}
        class="px-3 py-1 text-sm text-red-600 hover:text-red-800 hover:bg-red-50 rounded"
      >
        刪除
      </button>
    </div>
  )}
</div>

<script>
  // 開啟圖片預覽
  function openImageModal(imageUrl: string) {
    // 建立圖片預覽模態框
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="max-w-4xl max-h-full p-4">
        <img src="${imageUrl}" alt="心得圖片" class="max-w-full max-h-full object-contain rounded-lg">
        <button 
          onclick="this.closest('.fixed').remove()"
          class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300"
        >
          ×
        </button>
      </div>
    `;
    document.body.appendChild(modal);
    
    // 點擊背景關閉
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  // 編輯心得
  function editNote(noteId: string) {
    // 導向編輯頁面或開啟編輯模態框
    window.location.href = `/notes/edit/${noteId}`;
  }

  // 刪除心得
  async function deleteNote(noteId: string) {
    if (!confirm('確定要刪除此心得嗎？')) return;
    
    try {
      const response = await fetch(`/api/notes/${noteId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        // 重新載入頁面或移除該心得卡片
        window.location.reload();
      } else {
        const error = await response.json();
        alert('刪除失敗：' + error.message);
      }
    } catch (error) {
      console.error('刪除心得失敗:', error);
      alert('刪除心得時發生錯誤');
    }
  }
</script>
